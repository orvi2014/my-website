---
interface Props {
  placeholder?: string;
}

const { placeholder = "Search posts, stories, and more..." } = Astro.props;
---

<div class="search-container">
  <div class="search-wrapper">
    <input 
      type="search" 
      id="search-input" 
      class="search-input" 
      placeholder={placeholder}
      aria-label="Search"
    />
    <div id="search-results" class="search-results" hidden>
      <div class="results-header">
        <h3>Search Results</h3>
        <button id="close-search" class="close-button" aria-label="Close search">Ã—</button>
      </div>
      <div id="results-list" class="results-list"></div>
    </div>
  </div>
</div>

<style>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-wrapper {
    position: relative;
  }

  .search-input {
    width: 100%;
    padding: 0.8rem 1rem;
    font-size: 1rem;
    border: 2px solid var(--accent-color);
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.9);
    color: var(--text-color);
    font-family: 'EB Garamond', serif;
    transition: all var(--transition-speed);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(74, 52, 40, 0.1);
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border-radius: 4px;
    box-shadow: var(--page-shadow);
    margin-top: 0.5rem;
    z-index: 1000;
    max-height: 70vh;
    overflow-y: auto;
    opacity: 0;
    transform: translateY(-10px);
    transition: all var(--transition-speed);
  }

  .search-results:not([hidden]) {
    opacity: 1;
    transform: translateY(0);
  }

  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    background: var(--accent-color);
    color: white;
    border-radius: 4px 4px 0 0;
  }

  .results-header h3 {
    margin: 0;
    font-size: 1.2rem;
    font-family: 'Playfair Display', serif;
  }

  .close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: white;
    cursor: pointer;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    transition: background var(--transition-speed);
  }

  .close-button:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .results-list {
    padding: 1rem;
  }

  .result-item {
    padding: 1rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    transition: all var(--transition-speed);
    text-decoration: none;
    display: block;
    color: var(--text-color);
  }

  .result-item:last-child {
    border-bottom: none;
  }

  .result-item:hover {
    background: rgba(74, 52, 40, 0.05);
    transform: translateX(5px);
  }

  .result-title {
    font-size: 1.1rem;
    color: var(--accent-color);
    margin-bottom: 0.3rem;
    font-family: 'Playfair Display', serif;
  }

  .result-excerpt {
    font-size: 0.9rem;
    color: var(--text-color);
    opacity: 0.8;
    margin-bottom: 0.5rem;
  }

  .result-category {
    font-size: 0.8rem;
    color: var(--accent-color);
    opacity: 0.7;
    display: inline-block;
    padding: 0.2rem 0.5rem;
    background: rgba(74, 52, 40, 0.1);
    border-radius: 3px;
  }

  @media (max-width: 768px) {
    .search-container {
      max-width: 100%;
    }

    .search-results {
      position: fixed;
      top: 60px;
      left: 0;
      right: 0;
      bottom: 0;
      margin: 0;
      border-radius: 0;
    }

    .results-header {
      border-radius: 0;
    }
  }
</style>

<script>
  interface SearchResult {
    title: string;
    excerpt: string;
    url: string;
    category: string;
  }

  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchResults = document.getElementById('search-results') as HTMLDivElement;
  const resultsList = document.getElementById('results-list') as HTMLDivElement;
  const closeButton = document.getElementById('close-search') as HTMLButtonElement;

  let searchTimeout: ReturnType<typeof setTimeout>;

  searchInput?.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    clearTimeout(searchTimeout);
    
    if (target.value.length < 2) {
      searchResults.hidden = true;
      return;
    }

    searchTimeout = setTimeout(() => {
      performSearch(target.value);
    }, 300);
  });

  closeButton?.addEventListener('click', () => {
    searchResults.hidden = true;
    searchInput.value = '';
  });

  async function performSearch(query: string) {
    try {
      const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
      const results: SearchResult[] = await response.json();
      
      displayResults(results);
    } catch (error) {
      console.error('Search failed:', error);
    }
  }

  function displayResults(results: SearchResult[]) {
    if (!resultsList) return;

    resultsList.innerHTML = results.length ? results.map(result => `
      <a href="${result.url}" class="result-item">
        <div class="result-title">${result.title}</div>
        <div class="result-excerpt">${result.excerpt}</div>
        <div class="result-category">${result.category}</div>
      </a>
    `).join('') : '<div class="result-item">No results found</div>';

    searchResults.hidden = false;
  }

  // Close search results when clicking outside
  document.addEventListener('click', (e) => {
    if (!searchResults?.contains(e.target as Node) && e.target !== searchInput) {
      searchResults.hidden = true;
    }
  });

  // Add keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !searchResults.hidden) {
      searchResults.hidden = true;
      searchInput.value = '';
    }
  });
</script> 