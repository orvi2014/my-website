---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

const title = "Chapters – The Book of Life";
const description = "Flip through the chapters of The Book of Life – exploring thoughts, experiences, and discoveries.";
const currentPath = "/chapters";

// Get all categories and stories
const categories = await getCollection('categories');
const stories = await getCollection('stories');

// Sort categories by order
const sortedCategories = categories.sort((a: CollectionEntry<'categories'>, b: CollectionEntry<'categories'>) => 
  a.data.order - b.data.order
);

// Group stories by category
const storiesByCategoryRaw = stories.reduce((acc: Record<string, CollectionEntry<'stories'>[]>, story: CollectionEntry<'stories'>) => {
  const category = story.data.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(story);
  return acc;
}, {});

// Sort stories within each category by publication date
Object.keys(storiesByCategoryRaw).forEach((category: string) => {
  storiesByCategoryRaw[category].sort((a: CollectionEntry<'stories'>, b: CollectionEntry<'stories'>) => 
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );
});

// Number of stories to show initially per category
const INITIAL_STORIES = 5;

// Create a serializable object for the client
const storiesByCategory = Object.fromEntries(
  sortedCategories.map(cat => [
    cat.slug,
    (storiesByCategoryRaw[cat.slug] || []).map(story => ({
      slug: story.slug,
      data: {
        title: story.data.title,
        tags: story.data.tags || [],
        readingTime: story.data.readingTime || null,
        pubDate: typeof story.data.pubDate === 'string'
          ? story.data.pubDate
          : new Date(story.data.pubDate).toISOString(),
      }
    }))
  ])
);
---

<BaseLayout title={title} description={description} currentPath={currentPath}>
  <main class="book-toc">
    <section class="left-page">
      <h2>Table of Contents</h2>
      <ol class="chapters-list">
        {sortedCategories.map((category: CollectionEntry<'categories'>, index: number) => (
          <li class="chapter-item">
            <span class="chapter-number">{String.fromCharCode(65 + index)}.</span>
            <div class="chapter-content" data-category={category.slug} tabindex="0">
              <a href="#" class="chapter-title">
                <span class="chapter-icon">{category.data.icon}</span>
                {category.data.title}
              </a>
              <p class="chapter-description">{category.data.description}</p>
              <span class="story-count">
                {storiesByCategory[category.slug]?.length || 0} stories
              </span>
            </div>
          </li>
        ))}
      </ol>
    </section>
    <section class="right-page">
      <div class="intro-section" id="intro-section">
        <blockquote class="typewriter-text">
          "Every chapter begins with a question. Every story is an attempt to answer."
        </blockquote>
        <p class="typewriter-text">
          Step into the unfolding pages of The Book of Life — a quiet exploration of ideas, systems, and the human search for meaning. Each entry blends reflection with clarity, turning thoughts into stories and moments into meaning.
        </p>
      </div>
      <div class="stories-preview" id="stories-preview">
        {/* Stories will be injected here by JS only when a chapter is selected */}
      </div>
    </section>
  </main>

  <script>
    function initializeChaptersPage() {
      console.log('initializeChaptersPage called.');
      // Typewriter animation
      const typewriterElements = document.querySelectorAll('.typewriter-text');
      typewriterElements.forEach(element => {
        const htmlElement = element as HTMLElement; // Cast element to HTMLElement

        // Store original text if not already stored
        if (!htmlElement.dataset.originalText) {
          htmlElement.dataset.originalText = htmlElement.textContent || '';
        }
        const text = htmlElement.dataset.originalText; // Use stored text

        // Clear content for re-typing and remove any existing cursors
        htmlElement.textContent = '';
        const existingCursor = htmlElement.querySelector('.typewriter-cursor');
        if (existingCursor) {
          existingCursor.remove();
        }

        htmlElement.style.opacity = '1';
        htmlElement.classList.add('typing');
        const delay = parseInt(htmlElement.getAttribute('data-delay') || '0');
        const cursor = document.createElement('span');
        cursor.className = 'typewriter-cursor';
        htmlElement.appendChild(cursor);
        
        setTimeout(() => {
          let i = 0;
          const type = () => {
            // Ensure cursor is still a child before trying to insert
            if (!htmlElement.contains(cursor)) {
                console.log('Cursor missing, stopping typewriter for element:', htmlElement);
                return; // Cursor was removed, stop typing for this element
            }

            if (i < text.length) {
              htmlElement.insertBefore(document.createTextNode(text[i]), cursor);
              i++;
              requestAnimationFrame(type);
            } else {
              cursor.remove();
              htmlElement.classList.remove('typing');
            }
          };
          requestAnimationFrame(type);
        }, delay);
      });

      // Chapter navigation
      const chapterLinks = document.querySelectorAll('.chapter-title');
      const storiesPreview = document.getElementById('stories-preview');
      const introSection = document.getElementById('intro-section');
      let activeCategory: string | null = null; // Track the currently active category
      
      // Hide all stories on load and show intro
      if (storiesPreview) storiesPreview.innerHTML = '';
      if (introSection) {
        introSection.style.display = 'flex';
        console.log('Intro section display set to flex.', introSection);
      }

      chapterLinks.forEach(link => {
        // Instead of cloning the link, attach listener to the parent chapter-content
        const chapterContent = link.closest('.chapter-content') as HTMLElement; // Find the parent with chapter-content class

        if (chapterContent) {
          chapterContent.addEventListener('click', (e) => {
            e.preventDefault();
            const category = chapterContent.getAttribute('data-category'); // Get category from chapter-content
            if (!storiesPreview || !introSection || !category) return;
            
            if (activeCategory === category) {
              // If the same chapter is clicked again, toggle back to intro
              storiesPreview.innerHTML = '';
              introSection.style.display = 'flex';
              activeCategory = null; // No category is active now
            } else {
              // If a different chapter is clicked, or no chapter is active, show stories and hide intro
              introSection.style.display = 'none';
              storiesPreview.innerHTML = '';
              activeCategory = category; // Set the new active category
              
              // Get stories for this category from the server
              fetch(`/api/stories/${category}`)
                .then(response => response.json())
                .then(stories => {
                  if (!Array.isArray(stories) || stories.length === 0) {
                    storiesPreview.innerHTML = '<div class="no-stories">No stories in this chapter yet.</div>';
                    return;
                  }

                  // Create container for stories
                  const storiesContainer = document.createElement('div');
                  storiesContainer.className = 'stories-container';
                  
                  // Create stories list
                  const ul = document.createElement('ul');
                  ul.className = 'stories-list';
                  stories.forEach((story, index) => {
  const li = document.createElement('li');
  li.className = 'story-item';
  li.style.animationDelay = `${index * 0.1}s`;

  const storyLink = document.createElement('a');
  storyLink.href = `/chapters/stories/${story.slug}`;
  storyLink.className = 'story-card';

  // Title
  const title = document.createElement('h3');
title.className = 'story-title typewriter-text';
title.textContent = story.data.title;
storyLink.appendChild(title);

if (story.data.description) {
  const description = document.createElement('p');
  description.className = 'story-description';
  description.textContent = story.data.description;
  storyLink.appendChild(description);
}

if (story.data.tags?.length) {
  const tags = document.createElement('div');
  tags.className = 'story-tags';
  tags.textContent = story.data.tags.join(' · ');
  storyLink.appendChild(tags);
}

const meta = document.createElement('div');
meta.className = 'story-meta';

if (story.data.readingTime) {
  const timeRead = document.createElement('span');
  timeRead.className = 'reading-time';
  timeRead.textContent = `${story.data.readingTime} min read`;
  meta.appendChild(timeRead);
}

const date = document.createElement('span');
date.className = 'story-date';
date.textContent = new Date(story.data.pubDate).toLocaleDateString('en-US', {
  year: 'numeric', month: 'short', day: 'numeric',
});
meta.appendChild(date);

storyLink.appendChild(meta);

  if (story.data.readingTime) {
    const timeRead = document.createElement('span');
    timeRead.textContent = `${story.data.readingTime} min read`;
    meta.appendChild(timeRead);
  }

  // Append to story link and card
  storyLink.appendChild(title);
  storyLink.appendChild(meta);
  li.appendChild(storyLink);
  ul.appendChild(li);
});


                  storiesContainer.appendChild(ul);
                  storiesPreview.appendChild(storiesContainer);
                })
                .catch(error => {
                  console.error('Error fetching stories:', error);
                  storiesPreview.innerHTML = '<div class="no-stories">Failed to load stories. Please try again.</div>';
                });
            }
          });
        }
      });
    }

    // Initial call to set up the page elements correctly
    // This ensures typewriter animation runs on page load and stories are hidden.
    document.addEventListener('DOMContentLoaded', initializeChaptersPage);
    document.addEventListener('astro:after-swap', initializeChaptersPage); // For view transitions
  </script>

  <style>
    .book-toc {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: var(--spacing-xl);
      max-width: var(--content-width);
      margin: 0 auto;
      padding: var(--spacing-xl) var(--spacing-md);
      min-height: calc(100vh - var(--header-height) - var(--footer-height));
      contain: layout style paint;
    }

    .left-page,
    .right-page {
      padding: var(--spacing-xl);
      background: var(--card-background);
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      contain: content;
    }

    .left-page {
      border-right: 1px solid var(--border-color);
    }

    .left-page h2 {
      font-family: var(--font-display);
      font-size: clamp(1.5rem, 4vw, 2rem);
      color: var(--text-color);
      margin-bottom: var(--spacing-xl);
      text-align: center;
    }

    .chapters-list {
      list-style: none;
      padding: 0;
      margin: 0;
      contain: content;
    }

    .chapter-item {
      display: flex; /* Use flexbox to align number and content */
      align-items: baseline; /* Align items based on their text baseline */
      margin-bottom: 1.5rem;
      gap: 0.5rem; /* Add some space between the number and the content */
    }

    .chapter-number {
      font-family: var(--font-display);
      font-size: 1.2rem;
      color: var(--accent-color);
      min-width: 1.5rem; /* Adjust min-width to better fit the letter */
      text-align: right; /* Align the number to the right */
      flex-shrink: 0; /* Prevent the number from shrinking */
      padding-top: 0.1rem; /* Fine-tune vertical alignment */
    }

    .chapter-content {
      flex-grow: 1; /* Allow content to take available space */
      cursor: pointer;
      padding: 0.75rem 1rem;
      border-radius: var(--border-radius);
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      outline: none; /* Removed default outline */
    }

    .chapter-content:hover {
      background-color: var(--hover-background);
    }

    .chapter-content:focus {
      box-shadow: 0 0 0 3px var(--accent-color-light), inset 0 0 0 1px var(--accent-color); /* Custom focus ring */
      background-color: var(--hover-background);
    }

    .chapter-title {
      pointer-events: none; /* Make the anchor not directly clickable, parent handles */
      font-family: var(--font-display);
      font-size: clamp(1rem, 2vw, 1.2rem);
      color: var(--text-color);
      text-decoration: none;
      margin-bottom: var(--spacing-xs);
      transition: color var(--transition-speed);
    }

    .chapter-content:hover .chapter-title {
      color: var(--accent-color);
    }

    .chapter-icon {
      font-size: 1.2em;
    }

    .chapter-description {
      color: var(--text-color-secondary);
      font-size: clamp(0.9rem, 1.5vw, 0.95rem);
      line-height: 1.5;
      margin-bottom: var(--spacing-xs);
    }

    .story-count {
      font-size: 0.9rem;
      color: var(--text-color-tertiary);
    }

    .right-page {
      display: flex;
      flex-direction: column;
      justify-content: flex-start; /* Aligned to top */
      align-items: flex-start;
      min-height: 100%;
      height: 100%;
      position: relative;
      color: var(--text-color); 
      background-color: var(--card-background);
      padding: var(--spacing-xl);
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
    }

    .intro-section {
      text-align: center;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
      padding-top: 0;
    }

    .intro-section blockquote {
      font-family: var(--font-display);
      font-size: clamp(1.8rem, 3vw, 2.5rem);
      font-style: italic;
      color: var(--accent-color);
      margin: 0 0 1.5rem 0;
      padding: 0;
      line-height: 1.3;
      max-width: 80%;
    }

    .intro-section p {
      font-size: clamp(1rem, 1.5vw, 1.1rem);
      color: var(--text-color-secondary);
      margin-top: 0;
      max-width: 70%;
      line-height: 1.6;
    }

    .typewriter-text {
      opacity: 0;
      overflow: visible;
      white-space: normal;
      margin: 0 auto;
      position: relative;
      max-width: 100%;
    }

    .typewriter-cursor {
      display: inline-block;
      width: 2px;
      height: 1em;
      background-color: var(--accent-color);
      margin-left: 2px;
      animation: blink 0.7s step-end infinite;
    }

    @keyframes blink {
      from, to { opacity: 1; }
      50% { opacity: 0; }
    }

    .stories-preview {
      position: relative;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      justify-content: flex-start; /* Ensure content starts from the top */
      overflow-y: auto;
      padding: 2rem;
      background: transparent;
      border-radius: var(--border-radius);
      box-shadow: none;
      padding-top: 0; /* Explicitly set to 0 to ensure top alignment */
    }
    .story-card {
  display: block;
  padding: 1.5rem 2rem;
  background-color: var(--card-background);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  text-decoration: none;
  color: var(--text-color);
  transition: box-shadow 0.3s ease, transform 0.3s ease;
}

.story-card:hover {
  box-shadow: var(--card-shadow-hover);
  transform: translateY(-2px);
}

.story-card-header {
  font-family: var(--font-display);
  font-size: 1.75rem;
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: 0.5rem;
  color: var(--text-color);
}

.story-description {
  font-size: 1rem;
  color: var(--text-color-secondary);
  line-height: 1.6;
  margin-bottom: 1rem;
}

.story-tags {
  font-size: 0.875rem;
  color: var(--text-color-tertiary);
  margin-bottom: 0.75rem;
  line-height: 1.4;
}

.story-meta {
  font-size: 0.85rem;
  color: var(--text-color-tertiary);
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-top: auto;
}


    .stories-container {
      width: 100%;
      max-width: 800px;
      margin: 0 auto;
      animation: fadeIn 0.5s ease-out;
    }

    .stories-list {
      list-style: none;
      padding: 0;
      margin: 0;
      width: 100%;
    }

    .story-item {
  list-style: none;
  margin-bottom: 2rem;
  animation: fadeInUp 0.3s ease forwards;
}

.story-card {
  display: block;
  padding: 1.5rem;
  border-radius: 0.75rem;
  background: var(--card-background);
  box-shadow: var(--card-shadow);
  text-decoration: none;
  color: var(--text-color);
  transition: transform 0.2s ease;
}

.story-card:hover {
  transform: translateY(-2px);
}

.story-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--text-color);
  margin-bottom: 0.5rem;
}

.story-description {
  font-size: 1rem;
  color: var(--text-color-secondary);
  margin-bottom: 0.75rem;
  line-height: 1.6;
}

.story-tags {
  font-size: 0.875rem;
  color: var(--text-color-tertiary);
  margin-bottom: 0.75rem;
}

.story-meta {
  font-size: 0.85rem;
  color: var(--text-color-tertiary);
  display: flex;
  gap: 1rem;
}

    .story-item {
      opacity: 0;
      transform: translateY(20px);
      animation: fadeInUp 0.5s ease-out forwards;
      margin-bottom: 2.5rem; 
      padding: 1.5rem;
      background: var(--card-background); 
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow); 
      transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease; 
      border: none; /* Explicitly removed border */
      outline: none; /* Ensure no outline on focus */
    }

    .story-item:hover {
      transform: translateY(-2px);
      box-shadow: var(--card-shadow-hover); 
      background: var(--card-background-hover); 
    }

    .story-link {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      text-decoration: none;
      color: var(--text-color); /* Primary text color for links */
      gap: 2rem;
    }

    .story-info {
      flex: 1;
    }

    .story-title {
      display: block;
      font-family: var(--font-display);
      font-size: clamp(2rem, 4vw, 3rem); /* Significantly increased font size for strong distinction */
      font-weight: 700;
      color: var(--text-color); /* Primary text color for distinctness */
      margin-bottom: 0.85rem; /* Adjusted margin-bottom */
      line-height: 1.15; /* Adjusted line-height */
      transition: color 0.3s ease;
      letter-spacing: -0.04em; /* Tighter letter spacing for headings */
    }

    .story-link:hover .story-title {
      color: var(--accent-color); /* Accent color on hover */
    }

    .story-tags {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      margin-top: 1.2rem; /* Increased margin-top for more space from title */
    }

    .tag {
      font-size: 0.85rem; /* Slightly larger tag font */
      color: var(--text-color-secondary);
      background: var(--hover-background);
      padding: 0.25rem 0.7rem; /* Adjusted padding for tags */
      border-radius: var(--border-radius-sm);
      transition: all 0.3s ease;
      font-weight: 500;
      border: none; /* Explicitly removed border for tags */
      outline: none; /* Ensure no outline on focus */
    }

    .tag:hover {
      background: var(--accent-color-light);
      color: var(--accent-color-dark);
      transform: translateY(-1px);
    }

    .story-meta {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 0.5rem; /* Increased gap between meta items */
      font-size: 0.85rem;
      color: var(--text-color-tertiary);
      min-width: 100px;
      text-align: right;
      margin-top: 1.5rem; /* Increased margin-top for more space from tags */
    }

    .reading-time,
    .story-meta time {
      display: flex;
      align-items: center;
      gap: 0.35rem; /* Increased gap for icons and text */
      font-style: normal;
      color: var(--text-color-secondary);
    }

    .reading-time::before {
      content: "⏱";
      font-size: 0.9em;
    }

    .story-meta time::before {
      content: "📅";
      font-size: 0.9em;
    }

    .no-stories {
      color: var(--text-color-tertiary);
      font-style: italic;
      text-align: center;
      padding: 2rem;
      background: var(--card-background);
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      width: 100%;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Add animation delay for each story item */
    .story-item:nth-child(1) { animation-delay: 0.1s; }
    .story-item:nth-child(2) { animation-delay: 0.2s; }
    .story-item:nth-child(3) { animation-delay: 0.3s; }
    .story-item:nth-child(4) { animation-delay: 0.4s; }
    .story-item:nth-child(5) { animation-delay: 0.5s; }

    @media (max-width: 1024px) {
      .book-toc {
        grid-template-columns: 1fr;
        align-items: stretch;
      }

      .left-page {
        border-right: none;
        border-bottom: 1px solid var(--border-color);
      }
    }

    @media (max-width: 768px) {
      .book-toc {
        padding: var(--spacing-lg) var(--spacing-sm);
      }

      .left-page,
      .right-page {
        padding: var(--spacing-lg);
      }

      .story-item {
        padding: 1rem;
        margin-bottom: 1.5rem;
      }

      .story-link {
        flex-direction: column;
        gap: 1rem;
      }

      .story-meta {
        align-items: flex-start;
        text-align: left;
        flex-direction: row;
        gap: 1rem;
        margin-top: 0.5rem;
      }

      .story-title {
        font-size: 1.2rem;
      }
    }
  </style>
</BaseLayout>