---
import BaseLayout from './BaseLayout.astro';

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  author: string;
  image?: string;
  category?: string;
  readingTime?: number;
}

const {
  title,
  description,
  pubDate,
  author,
  image,
  category,
  readingTime
} = Astro.props;

const formattedDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}).format(pubDate);
---

<BaseLayout 
  title={title}
  description={description}
  currentPath={Astro.url.pathname}
  image={image}
  type="article"
  pubDate={pubDate}
>
  <article class="chapter">
    <header class="chapter-header">
      <h1>{title}</h1>
      <div class="chapter-meta">
        <span class="author">By {author}</span>
        <time datetime={pubDate.toISOString()}>{formattedDate}</time>
        {category && <span class="category">{category}</span>}
        {readingTime && <span class="reading-time">{readingTime} min read</span>}
      </div>
    </header>

    {image && (
      <div class="chapter-image">
        <img src={image} alt={title} />
      </div>
    )}

    <div class="chapter-content">
      <slot />
    </div>

    <footer class="chapter-footer">
      <div class="share-buttons">
        <button class="share-button" data-platform="twitter">
          Share on Twitter
        </button>
        <button class="share-button" data-platform="linkedin">
          Share on LinkedIn
        </button>
      </div>
    </footer>
  </article>
</BaseLayout>

<style>
  .chapter {
    max-width: 800px;
    margin: 0 auto;
    padding: var(--spacing-lg) 0;
  }

  .chapter-header {
    text-align: center;
    margin-bottom: var(--spacing-lg);
  }

  .chapter-header h1 {
    font-size: 2.5rem;
    margin-bottom: var(--spacing-sm);
    color: var(--heading-color);
    font-family: 'Playfair Display', serif;
  }

  .chapter-meta {
    display: flex;
    justify-content: center;
    gap: var(--spacing-md);
    color: var(--text-color);
    opacity: 0.8;
    font-size: 0.9rem;
    margin-bottom: var(--spacing-sm);
  }

  .category {
    background: var(--tag-bg);
    color: var(--tag-color);
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
  }

  .chapter-image {
    margin: var(--spacing-lg) 0;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: var(--page-shadow);
  }

  .chapter-image img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }

  .chapter-content {
    font-size: 1.1rem;
    line-height: 1.8;
    color: var(--text-color);
  }

  .chapter-content h2 {
    font-size: 1.8rem;
    margin: var(--spacing-lg) 0 var(--spacing-md);
    color: var(--heading-color);
    font-family: 'Playfair Display', serif;
  }

  .chapter-content p {
    margin-bottom: var(--spacing-md);
  }

  .chapter-content img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: var(--spacing-md) 0;
  }

  .chapter-content blockquote {
    border-left: 4px solid var(--accent-color);
    padding-left: var(--spacing-md);
    margin: var(--spacing-md) 0;
    font-style: italic;
    color: var(--text-color);
    opacity: 0.9;
  }

  .chapter-footer {
    margin-top: var(--spacing-xl);
    padding-top: var(--spacing-md);
    border-top: 1px solid var(--border-color);
  }

  .share-buttons {
    display: flex;
    justify-content: center;
    gap: var(--spacing-sm);
  }

  .share-button {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .share-button:hover {
    background: var(--accent-color);
    color: white;
    border-color: var(--accent-color);
  }

  @media (max-width: 768px) {
    .chapter {
      padding: var(--spacing-md);
    }

    .chapter-header h1 {
      font-size: 2rem;
    }

    .chapter-meta {
      flex-direction: column;
      gap: var(--spacing-xs);
    }

    .chapter-content {
      font-size: 1rem;
    }
  }
</style>

<script>
  // Share functionality
  document.querySelectorAll('.share-button').forEach(button => {
    button.addEventListener('click', () => {
      const platform = (button as HTMLButtonElement).dataset.platform;
      const url = encodeURIComponent(window.location.href);
      const title = encodeURIComponent(document.title);
      
      let shareUrl = '';
      switch (platform) {
        case 'twitter':
          shareUrl = `https://twitter.com/intent/tweet?url=${url}&text=${title}`;
          break;
        case 'linkedin':
          shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${url}`;
          break;
      }
      
      window.open(shareUrl, '_blank', 'width=600,height=400');
    });
  });
</script> 